@namespace MediaIngesterCore.Parsing
@classname Parser
@using MediaIngesterCore.Parsing.SyntaxTree
@using MediaIngesterCore.Parsing.SyntaxTree.Conditions
@trace true
@start program


program<ProgramNode>
 = #{ state["Indentation"] = 0; } v:variableBlock (EOL _*)+ b:block{new ProgramNode(v,b)} 
 / #{ state["Indentation"] = 0; } b:block{new ProgramNode(null,b)}
variableBlock<VarBlockNode>
  = head:assign (EOL _*)+ tail:variableBlock { new VarBlockNode(head).Concat(tail)}
  / line:assign _* { new VarBlockNode(line) }

block<BlockNode>
  = INDENTATION head:rule _* (EOL _*)+ tail:block { new BlockNode(head).Concat(tail)}
  / INDENTATION line:rule _*{ new BlockNode(line) }


expression<ExpressionNode> 
  = "path[" p:("" [0-9\-]+) "]" {new PathPartNode(int.Parse(p))}
  / "[" d:(""[^"?:\r\n]+) ":"  t:(""[^\]"?}\r\n]+) "]"{new MetadataNode(d,t)}
  / value
  / lookup
  
  

assign<AssignNode> = name:varName " = " e:expression {new AssignNode(name,e)}      
lookup<LookupNode> = name:varName {new LookupNode(name)}
varName = ("" [A-Za-z0-9_]+)

value<ValueNode> 
  = '"' v:((stringPart))+ '"'  {new ValueNode(new List<SyntaxNode>(v))}
  / 'r"' v:(""[^\r\n"]+) '"'  {new ValueNode(new List<SyntaxNode>(1){new LiteralNode(v)})}


stringPart<SyntaxNode>  
  = stringInterpolation 
  / literal

stringInterpolation<LookupNode> = "{" v:lookup "}" {v}
literal<LiteralNode> = v:escapedString {new LiteralNode(v)}

escapedString<string>
  = v:("\\"? !stringInterpolation c:("" [^\r\n"]) {c})+ {v.Aggregate((a,b) => a+b)}

rule<RuleNode> 
  = (c:compositeCondition _ '-->' _ p:path _*  EOL INDENTATION r:rule) {new RuleNode(c,p,r,null)}
  / (c:compositeCondition _ '-->' _ p:path _* EOL INDENT b:block UNDENT) {new RuleNode(c,p,null,b)} 
  / (c:compositeCondition _ '-->' _ p:path ) {new RuleNode(c,p,null,null)}


path<SyntaxNode>
  = ignore
  / empty
  / expression
ignore<IgnoreNode> = "!" {new IgnoreNode()}
empty<ValueNode> = "?" {new ValueNode(new List<SyntaxNode>(1){new LiteralNode("")})}

compositeCondition<ConditionNode>
  = "not" _? "("? c:condition")"? {new NotNode(c)}
  / condition

condition<ConditionNode> 
  = ('any') {new AnyNode()}
  / (l:expression _? ('=='/"equals") _? r:expression) {new EqualsNode(l,r)}
  / (l:expression _? ('!='/"not equals")_? r:expression) {new NotEqualsNode(l,r)}
  / (l:expression _? "matches" _? r:expression) {new MatchesNode(l,r)}
  / (l:expression _? "matches" _? r:expression) {new ContainsNode(l,r)}

_ = [\t ]+
EOL = '\n' / '\r\n'

INDENTATION
  = indent: "\t"* &{ indent.Count == state["Indentation"] }

INDENT
  = #{ state["Indentation"] += 1; }

UNDENT
  = #{ state["Indentation"] -= 1; }